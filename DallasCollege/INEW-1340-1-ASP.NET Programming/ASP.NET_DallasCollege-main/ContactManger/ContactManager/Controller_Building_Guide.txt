===================================================================================
CONTROLLER BUILDING GUIDE - ASP.NET CORE
===================================================================================

QUESTION: How do I know what steps to take to build a controller?

Task: Building an IActionResult Details(int id){...} // show one contact

===================================================================================
GENERAL CONTROLLER ACTION BUILDING PROCESS
===================================================================================

Step 1: Understand the Requirements
-----------------------------------
Ask yourself these questions:
- What does this action need to do? (Show one contact)
- What data does it need? (Contact ID from URL)
- What should it return? (View with contact details)
- What could go wrong? (Contact not found)

Step 2: Identify the Method Signature
-------------------------------------
public IActionResult Details(int id)

- public - Must be accessible
- IActionResult - Can return views, redirects, errors
- Details - Method name (becomes part of URL)
- int id - Parameter from URL route

Step 3: Determine the Data Access Pattern
-----------------------------------------
For "show one contact":
- Query: Find contact by ID
- Include related data: Category information
- Handle not found: What if ID doesn't exist?

Step 4: Plan the Logic Flow
---------------------------
1. Get contact from database by ID
2. Check if contact exists
3. If not found → return error
4. If found → return view with contact data

Step 5: Implement the Method
----------------------------

===================================================================================
STEP-BY-STEP IMPLEMENTATION FOR DETAILS METHOD
===================================================================================

Step A: Database Query
----------------------
public IActionResult Details(int id)
{
    // Step 1: Query database
    var contact = _context.Contacts
        .Include(c => c.Category)  // Get related Category
        .FirstOrDefault(c => c.ContactId == id);  // Find by ID
}

Why this approach:
- Include() - Loads related data (Category name)
- FirstOrDefault() - Returns null if not found (safe)
- ContactId == id - Matches the URL parameter

Step B: Error Handling
----------------------
    // Step 2: Handle not found
    if (contact == null)
    {
        return NotFound();  // HTTP 404 response
    }

Why this approach:
- Always check for null before using data
- NotFound() returns proper HTTP status code
- Prevents crashes from null reference exceptions

Step C: Return Result
---------------------
    // Step 3: Return view with data
    return View(contact);
}

Why this approach:
- Passes contact object to the view
- View can access all contact properties
- Follows MVC separation of concerns

===================================================================================
COMPLETE METHOD TEMPLATE
===================================================================================

public IActionResult Details(int id)
{
    // 1. Get data from database
    var contact = _context.Contacts
        .Include(c => c.Category)
        .FirstOrDefault(c => c.ContactId == id);
    
    // 2. Handle edge cases
    if (contact == null)
    {
        return NotFound();
    }
    
    // 3. Return successful result
    return View(contact);
}

===================================================================================
UNIVERSAL CONTROLLER ACTION BUILDING STEPS
===================================================================================

For Any Action Method, Follow This Pattern:

1. Analyze Requirements
   - What business logic is needed?
   - What data is required?
   - What are the success/failure scenarios?

2. Design Method Signature
   - Choose return type (IActionResult, ActionResult<T>)
   - Determine parameters (from URL, form, query string)
   - Add HTTP verb attributes if needed ([HttpPost], etc.)

3. Implement Data Access
   - Query database if needed
   - Validate input parameters
   - Handle related data (Include statements)

4. Add Error Handling
   - Check for null values
   - Validate business rules
   - Return appropriate error responses

5. Return Response
   - Return view with data
   - Redirect to another action
   - Return JSON for APIs

===================================================================================
COMMON ACTION METHOD PATTERNS
===================================================================================

List/Index Pattern:
-------------------
public IActionResult Index()
{
    var items = _context.Items.Include(related).ToList();
    return View(items);
}

Details Pattern:
----------------
public IActionResult Details(int id)
{
    var item = _context.Items.Include(related).FirstOrDefault(x => x.Id == id);
    if (item == null) return NotFound();
    return View(item);
}

Create GET Pattern:
-------------------
public IActionResult Create()
{
    ViewBag.RelatedItems = _context.RelatedItems.ToList();
    return View();
}

Create POST Pattern:
--------------------
[HttpPost]
public IActionResult Create(ModelClass model)
{
    if (ModelState.IsValid)
    {
        _context.Items.Add(model);
        _context.SaveChanges();
        return RedirectToAction("Index");
    }
    ViewBag.RelatedItems = _context.RelatedItems.ToList();
    return View(model);
}

===================================================================================
DECISION TREE FOR DETAILS METHOD
===================================================================================

Question: What do I need to do?
Answer: Show one contact

Question: What data do I need?
Answer: Contact ID (from URL)

Question: How do I get the contact?
Answer: Query database by ID

Question: What if contact doesn't exist?
Answer: Return 404 error

Question: What if contact exists?
Answer: Pass it to view for display

===================================================================================
TESTING YOUR LOGIC
===================================================================================

After implementing, test these scenarios:
- /Contact/Details/1 - Valid ID
- /Contact/Details/999 - Invalid ID  
- /Contact/Details/abc - Invalid parameter type

===================================================================================
CONTROLLER STRUCTURE REQUIREMENTS
===================================================================================

Complete Controller Class Structure:
------------------------------------

using Microsoft.AspNetCore.Mvc;
using ContactManager.Models;
using Microsoft.EntityFrameworkCore;

namespace ContactManager.Controllers
{
    public class ContactController : Controller
    {
        private readonly ContactContext _context;

        public ContactController(ContactContext context)
        {
            _context = context;
        }

        // Your action methods go here
        public IActionResult Details(int id)
        {
            var contact = _context.Contacts
                .Include(c => c.Category)
                .FirstOrDefault(c => c.ContactId == id);
            
            if (contact == null)
            {
                return NotFound();
            }
            
            return View(contact);
        }

        // Other action methods...
        public IActionResult Index()
        {
            var contacts = _context.Contacts
                .Include(c => c.Category)
                .OrderBy(c => c.Firstname)
                .ToList();
            return View(contacts);
        }
    }
}

===================================================================================
NEXT STEPS AFTER BUILDING CONTROLLER
===================================================================================

1. Create the View (Views/Contact/Details.cshtml)
2. Test the Action (run the app and navigate to URL)
3. Add Navigation (links from other pages)
4. Handle Edge Cases (empty database, etc.)

===================================================================================
URL EXAMPLES
===================================================================================

How URLs map to your Details method:
- /Contact/Details/1 → Details(1) → Shows contact with ID 1
- /Contact/Details/5 → Details(5) → Shows contact with ID 5
- /Contact/Details/999 → Details(999) → Shows 404 if ID doesn't exist

===================================================================================
SUMMARY
===================================================================================

This systematic approach works for any controller action you need to build:

1. Understand what the action should do
2. Design the method signature
3. Plan the data access
4. Implement error handling
5. Return appropriate response
6. Test with various scenarios

The key is following consistent patterns and always handling edge cases like 
null data or invalid parameters.

===================================================================================
END OF GUIDE
===================================================================================